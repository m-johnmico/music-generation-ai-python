import os
import numpy as np
import librosa
from sklearn import svm
from sklearn.preprocessing import StandardScaler
from flask import Flask, request, jsonify

app = Flask(__name__)

# Load emotion dataset
dataset_path = os.path.join(os.getcwd(), "dataset")
X = np.load(os.path.join(dataset_path, "X.npy"))
y = np.load(os.path.join(dataset_path, "y.npy"))

# Train SVM model
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
model = svm.SVC(kernel="linear", C=1.0, random_state=42)
model.fit(X_scaled, y)

# Define API endpoint for emotion detection
@app.route("/detect_emotion", methods=["POST"])
def detect_emotion():
    file = request.files["file"]
    audio, sr = librosa.load(file, sr=22050, mono=True)
    mfcc = librosa.feature.mfcc(audio, sr=sr, n_mfcc=13)
    contrast = librosa.feature.spectral_contrast(audio, sr=sr)
    feature_vector = np.concatenate((mfcc.mean(axis=1), contrast.mean(axis=1)))
    feature_vector_scaled = scaler.transform(feature_vector.reshape(1, -1))
    z_scores = (feature_vector_scaled - X_scaled.mean(axis=0)) / X_scaled.std(axis=0)
    prediction = model.predict(z_scores)
    return jsonify({"emotion": prediction[0]})

if __name__ == "__main__":
    app.run()
